{"version":3,"sources":["views/Predictions/components/History/Header.tsx","hooks/usePersistState.ts","hooks/useWeb3.ts","hooks/useContract.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","components/UnlockButton.tsx","utils/getTimePeriods.ts","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","config/index.ts","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","hooks/useTokenBalance.ts","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["HistoryTabs","usePersistState","initialValue","localStorageKey","useState","valueFromLS","localStorage","getItem","JSON","parse","error","value","setValue","useEffect","setItem","stringify","useWeb3","library","useWeb3React","refEth","useRef","Web3","getWeb3NoAccount","web3","setweb3","current","usePredictionsContract","useMemo","getPredictionsContract","usePreviousValue","ref","useLastUpdated","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useCallback","useGetLatestOraclePrice","BIG_ZERO","price","setPrice","refresh","chainlinkOracleContract","getChainlinkOracleContract","useChainlinkOracleContract","a","methods","latestAnswer","call","response","getBalanceAmount","BigNumber","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","account","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","UnlockButton","props","useAuth","login","logout","onPresentConnectModal","useWalletModal","getTimePeriods","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","claim","send","from","once","result","markBetAsCollected","transactionHash","href","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","Row","PrizePoolRow","bold","getPrizePoolAmount","PayoutRow","positionLabel","formattedMultiplier","fontSize","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","key","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","bnbBusdPrice","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","times","toNumber","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","usePriceBnbBusd","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","config","EXPONENTIAL_AT","DECIMAL_PLACES","DEFAULT_TOKEN_DECIMAL","BIG_TEN","pow","useSwiper","swiperContext","useContext","FlexRow","dust","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","balance","setBalance","eth","getBalance","walletBalance","fetchBalance","useGetBnbBalance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","valueAsBn","percentageOfMaxBalance","percentageDisplay","Number","isNaN","showFieldWarning","minBetAmountBalance","eq","lt","getButtonProps","bnValue","lte","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","isWarning","inputProps","name","min","max","onValueChanged","newValue","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","getBlockNumber","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader"],"mappings":"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","file":"static/js/6.ed71e721.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\n\n/**\n * Same as \"useState\" but saves the value to local storage each time it changes\n */\nconst usePersistState = (initialValue: any, localStorageKey: string) => {\n  const [value, setValue] = useState(() => {\n    try {\n      const valueFromLS = localStorage.getItem(localStorageKey)\n\n      return valueFromLS ? JSON.parse(valueFromLS) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(localStorageKey, JSON.stringify(value))\n  }, [value, localStorageKey])\n\n  return [value, setValue]\n}\n\nexport default usePersistState\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useMemo } from 'react'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getBep20Contract,\n  getCakeContract,\n  getBunnyFactoryContract,\n  getBunnySpecialContract,\n  getPancakeRabbitContract,\n  getProfileContract,\n  getIfoV1Contract,\n  getIfoV2Contract,\n  getLotteryContract,\n  getLotteryTicketContract,\n  getMasterchefContract,\n  getPointCenterIfoContract,\n\n  getClaimRefundContract,\n  getTradingCompetitionContract,\n  getEasterNftContract,\n  getErc721Contract,\n  getCakeVaultContract,\n  getPredictionsContract,\n  getChainlinkOracleContract,\n\n} from 'utils/contractHelpers'\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoV1Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV1Contract(address, web3), [address, web3])\n}\n\nexport const useIfoV2Contract = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getIfoV2Contract(address, web3), [address, web3])\n}\n\nexport const useERC20 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getBep20Contract(address, web3), [address, web3])\n}\n\n/**\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\n */\nexport const useERC721 = (address: string) => {\n  const web3 = useWeb3()\n  return useMemo(() => getErc721Contract(address, web3), [address, web3])\n}\n\nexport const useCake = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeContract(web3), [web3])\n}\n\nexport const useBunnyFactory = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnyFactoryContract(web3), [web3])\n}\n\nexport const usePancakeRabbits = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPancakeRabbitContract(web3), [web3])\n}\n\nexport const useProfile = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getProfileContract(web3), [web3])\n}\n\nexport const useLottery = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryContract(web3), [web3])\n}\n\nexport const useLotteryTicket = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getLotteryTicketContract(web3), [web3])\n}\n\nexport const useMasterchef = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getMasterchefContract(web3), [web3])\n}\n\nexport const usePointCenterIfoContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPointCenterIfoContract(web3), [web3])\n}\n\nexport const useBunnySpecialContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getBunnySpecialContract(web3), [web3])\n}\n\nexport const useClaimRefundContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getClaimRefundContract(web3), [web3])\n}\n\nexport const useTradingCompetitionContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getTradingCompetitionContract(web3), [web3])\n}\n\nexport const useEasterNftContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getEasterNftContract(web3), [web3])\n}\n\nexport const useCakeVaultContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getCakeVaultContract(web3), [web3])\n}\n\nexport const usePredictionsContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getPredictionsContract(web3), [web3])\n}\n\nexport const useChainlinkOracleContract = () => {\n  const web3 = useWeb3()\n  return useMemo(() => getChainlinkOracleContract(web3), [web3])\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been cancelled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst UnlockButton = (props) => {\r\n  const { t } = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {t('Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\n\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={`https://bscscan.com/tx/${result.transactionHash}`}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n           \n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.borderColor\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  // const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              120\n              {/* {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`} */}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.lockBlock}`} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.endBlock}`} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`https://bscscan.com/address/${account}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from '../../views/Predictions/components/CollectRoundWinningsModal'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <UnlockButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal  payout={100} roundId={\"okok\"} epoch={1} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n        <div>\r\n          <Button onClick={onPresentCollectWinningsModal}>Click me</Button>\r\n        </div>\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.borderColor\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is waiting to be confirmed.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import BigNumber from 'bignumber.js/bignumber'\nimport { BIG_TEN } from 'utils/bigNumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BSC_BLOCK_TIME = 3\n\n// CAKE_PER_BLOCK details\n// 40 CAKE is minted per block\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\n// 10 CAKE per block goes to CAKE syrup pool\n// 10 CAKE per block goes to Yield farms and lottery\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\n// CAKE/Block in src/views/Home/components/CakeStats.tsx = 20 (40 - Amount sent to burn pool)\n\nexport const CAKE_PER_BLOCK = new BigNumber(40)\nexport const BLOCKS_PER_YEAR = new BigNumber((60 / BSC_BLOCK_TIME) * 60 * 24 * 365) // 10512000\nexport const BASE_URL = 'https://pancakeswap.finance'\nexport const BASE_EXCHANGE_URL = 'https://exchange.pancakeswap.finance'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`\nexport const BASE_BSC_SCAN_URL = 'https://bscscan.com'\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\nexport const LOTTERY_TICKET_PRICE = 1\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\n  if (bnbBalance.eq(0)) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\n\n  const handleChange = (input) => {\n    setValue(input)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{interval}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only, and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart')\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"],"sourceRoot":""}